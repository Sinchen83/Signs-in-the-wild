//  Copied from ArtBlocks github
//--------------------------------------------------------------------
var DEFAULT_SIZE = 1000;
var WIDTH = window.innerWidth;
var HEIGHT = window.innerHeight;
var DIM = Math.min(WIDTH, HEIGHT);
var M = DIM / DEFAULT_SIZE;
var hash = random_hash();
var seed = parseInt(hash.slice(0, 16), 16);
var p = [];
for (let i = 0; i < 64; i += 2) {
  p.push(hash.slice(i + 2, i + 4));
}
var rns = p.map((x) => {
  return parseInt(x, 16) % 10;
});
//--------------------------------------------------------------------

// GLOBAL VARIABLES NEEDED FOR VARIATION IN OUTPUT
var cont;
var colorPosition = 0;
var colorStep = 1;
var SignPosition1 = 0;
var SignStep1 = 1;
var SignPosition2 = 31;
var SignStep2 = -1;
var Strichdicke;
var Wiederholungen;
var ExtraWiederholung
var TraitSpecialMode = "none";
var TraitStyle = ["classic white", "classic black", "simple", "darkmode", "x-ray"];
var TraitColorset =["venom", "1001 nights", "candy", "retro", "rusty backyard", "acid", "appletree", "evening at the seaside", "shades of gold", "frozen palace", "transparent", "x-ray" ];
var TraitCanvas= ["small", "medium", "large"];
var TraitFrame = ["thin", "normal", "fat"];


// COLORSET 0 - venom
var r0 = [233, 68, 255, 4];
var g0 = [46, 11, 32, 0];
var b0 = [251, 212, 121, 94];
var a0 = [75, 75, 75, 75];

// COLORSET 1 - 1001 nights
var r1 = [98, 182, 236, 255];
var g1 = [18, 42, 103, 164];
var b1 = [87, 102, 98, 115];
var a1 = [100, 100, 100, 100];

// COLORSET 2 - candy
var r2 = [0, 114, 254, 250];
var g2 = [191, 152, 111, 184];
var b2 = [255, 188, 188, 220];
var a2 = [100, 100, 100, 100];

// COLORSET 3 - retro
var r3 = [190, 111, 79, 23];
var g3 = [188, 139, 72, 23];
var b3 = [153, 108, 94, 36];
var a3 = [127, 127, 127, 127];

// COLORSET 4 - rusty backyard
var r4 = [0, 255, 255, 241];
var g4 = [48, 119, 206, 242];
var b4 = [59, 119, 150, 218];
var a4 = [160, 160, 127, 170];

// COLORSET 5 - acid
var r5 = [0, 254, 84, 1];
var g5 = [40, 64, 254, 109];
var b5 = [60, 234, 64, 231];
var a5 = [125, 75, 75, 75];

// COLORSET 6 - appletree
var r6 = [252, 255, 38, 1];
var g6 = [222, 77, 89, 40];
var b6 = [182, 109, 53, 36];
var a6 = [100, 100, 100, 125];

// COLORSET 7 - evening at the seaside
var r7 = [252, 113, 215, 1];
var g7 = [228, 150, 26, 51];
var b7 = [168, 159, 33, 78];
var a7 = [100, 100, 100, 100];

// COLORSET 8 - shades of gold
var r8 = [252, 235, 251, 237];
var g8 = [213,240,100,100];
var b8 = [15,200,4,4];
var a8 = [127, 200, 127, 127];

// COLORSET 9 - frozen palace
var r9 = [0,0,0,159];
var g9 = [43,95,185,244];
var b9 = [89,140,190,229];
var a9 = [127,127,127,127];

// COLORSET 10 - transparent
var r10 = [0, 0, 0, 0];
var g10 = [0, 0, 0, 0];
var b10 = [0, 0, 0, 0];
var a10 = [0, 0, 0, 0];

// COLORSET 11 - x-ray
var r11 = [0, 0, 0, 0];
var g11 = [255, 255, 255, 255];
var b11 = [0, 0, 0, 0];
var a11 = [15, 15, 15, 15];

// FILL COLOR
r = [r0, r1, r2, r3, r4, r5, r6, r7, r8, r9,r10,r11];
g = [g0, g1, g2, g3, g4, g5, g6, g7, g8, g9,g10,g11];
b = [b0, b1, b2, b3, b4, b5, b6, b7, b8, b9,b10,b11];
a = [a0, a1, a2, a3, a4, a5, a6, a7, a8, a9,a10,a11];

function setup() {
  // TESTS ------------------------------------------------------------
  //print(hash);
  //---------------------------------------------------------------------

  // SETUP STYLE AND COLORSETS
  var styleTrigger = (rns[3] + 1) * (rns[4] + 1);

  if (styleTrigger < 21) {
    style = 0;
  } else if (styleTrigger < 56) {
    style = 1;
  } else if (styleTrigger < 80) {
    style = 2;
  } else if (styleTrigger < 100) {
    style = 3;
  } else if (styleTrigger == 100) {
    style = 4;
  }

  if (style == 4) {
    colorset = 11;
  } else if (style == 2 || style == 3) {
    colorset = 10;
  } else colorset = int(map(rns[3], 0, 9, 0, 9.99));
  
  // BACKGROUND COLOR
  var bgColor = style;
  var bg1 = [255, 0, 255, 0, 0];
  var bg2 = [255, 0, 255, 0, 0];
  var bg3 = [255, 0, 255, 0, 0];

  // FRAME COLOR
  var frameColor = style;
  var frame1 = [0, 255, 0, 255, 0];
  var frame2 = [0, 255, 0, 255, 255];
  var frame3 = [0, 255, 0, 255, 0];

  // LINE COLOR
  var lineColor = style;
  var lineColor1 = [0, 0, 0, 255, 0];
  var lineColor2 = [0, 0, 0, 255, 255];
  var lineColor3 = [0, 0, 0, 255, 0];

  // SETUP OF CANVAS
  var spaceFactor;
  var spaceTrigger = rns[0];

  if (spaceTrigger < 3) {
    spaceFactor = 0.08;
    Strichdicke = 7.5 * M;
    if((rns[19]*rns[20])>=64) {ExtraWiederholung=1; TraitSpecialMode="wild"} else {ExtraWiederholung=0}
    //------ take out special mode -----
    Wiederholungen = 6+ExtraWiederholung;
    TraitCanvas = TraitCanvas[2];
    
  } else if (spaceTrigger < 7) {
    spaceFactor = 0.19;
    Strichdicke = 7.5 * M;
    Wiederholungen =6;
    TraitCanvas = TraitCanvas[1];
  } else {
    spaceFactor = 0.3;
    Strichdicke = 6.5 * M;
    Wiederholungen = 6;
    TraitCanvas = TraitCanvas[0];
  }

  var space = WIDTH  * spaceFactor;
  var quad = WIDTH - space * 2;
  var x = space;
  var y = space;

  // CREATE CANVAS & BACKGROUND
  createCanvas(WIDTH, WIDTH);
  background(bg1[bgColor], bg2[bgColor], bg3[bgColor]);

  // SETUP AND CREATION OF FRAME
  var frameFactor;
  var frameTrigger = rns[1];

  if (frameTrigger < 3) {
    frameFactor = 2 * M;
    TraitFrame = TraitFrame[0];
  } else if (frameTrigger < 7) {
    frameFactor = 12 * M;
    TraitFrame = TraitFrame[1];
  } else {
    frameFactor = 21 * M;
    TraitFrame = TraitFrame[2];
  }

  strokeWeight(frameFactor);
  noFill();
  stroke(frame1[frameColor], frame2[frameColor], frame3[frameColor]);
  rect(
    space - space * 0.6,
    space - space * 0.6,
    WIDTH - 2 * (space - space * 0.6),
    WIDTH - 2 * (space - space * 0.6)
  );
  stroke(lineColor1[lineColor], lineColor2[lineColor], lineColor3[lineColor]);

  
  //Traits
  TraitStyle = TraitStyle[style]
  TraitColorset = TraitColorset[colorset];
  print("style: ",TraitStyle);
  print("colorset: ",TraitColorset);
  print("canvas: ",TraitCanvas);
  print("frame: ",TraitFrame);
  print("special mode:",TraitSpecialMode);
  
  // DRAW BLOCKS
  new QUADRAT(x, y, 1, quad);
}

// **********1ST QUADRAT FUNCTION**********
function QUADRAT(x, y, wied, quad) {
  this.quad = quad;
  this.width = this.quad / pow(2, wied - 1);
  strokeWeight(0.75*M);
  //strokeWeight(Strichdicke);
  BlockColorFiller(rns[colorPosition]);
  rect(x, y, this.width, this.width);

  if (colorPosition + colorStep > 31) {
    colorStep = -1;
  }
  if (colorPosition + colorStep < 0) {
    colorStep = 1;
  }
  colorPosition += colorStep;

  for (var i = 0; i < 4; i++) {
    var z = new QUADRAT2(
      x + ((i % 2) * this.width) / 2,
      y + (int(i / 2) * this.width) / 2,
      wied + 1,
      this.quad
    );
  }
}

// **********2. QUADRAT FUNCTION**********
function QUADRAT2(x, y, wied, quad) {
  if(wied <= Wiederholungen) {
  this.quad = quad;
  this.width = this.quad / pow(2, wied - 1);
  var cont = this.width;
  strokeWeight(0.75*M);
  //strokeWeight(Strichdicke - wied * M * 1.15);
  rectMode(CORNER);
  BlockColorFiller(rns[colorPosition]);

  if (colorPosition + colorStep > 31) {
    colorStep = -1;
  }
  if (colorPosition + colorStep < 0) {
    colorStep = 1;
  }
  colorPosition += colorStep;

  rect(x, y, this.width, this.width);

  var Signs = round(
    ((rns[SignPosition1] + 1) * (rns[SignPosition2] + 1)) / (wied / 2)
  );

  if (SignPosition1 + SignStep1 > 31) {
    SignPosition1 = 31;
    SignStep1 = -3;
  } else if (SignPosition1 + SignStep1 < 0) {
    SignPosition1 = 0;
    SignStep1 = 1;
  } else {
    SignPosition1 += SignStep1;
  }
  if (SignPosition2 + SignStep2 > 31) {
    SignPosition2 = 31;
    SignStep2 = -2;
  } else if (SignPosition2 + SignStep2 < 0) {
    SignPosition2 = 0;
    SignStep2 = 1;
  } else {
    SignPosition2 += SignStep2;
  }

  if (Signs == 1) {
    Sign1(x, y, cont);
  } else if (Signs == 2) {
    Sign2(x, y, cont);
  } else if (Signs == 3) {
    Sign3(x, y, cont);
  } else if (Signs == 4) {
    Sign4(x, y, cont);
  } else if (Signs == 5) {
    Sign5(x, y, cont);
  } else if (Signs == 6) {
    Sign6(x, y, cont);
  } else if (Signs == 7) {
    Sign7(x, y, cont);
  } else if (Signs == 8) {
    Sign8(x, y, cont);
  } else if (Signs == 9) {
    Sign9(x, y, cont);
  } else  {
    for (var i = 0; i < 4; i++) {
      var z = new QUADRAT2(
        x + ((i % 2) * this.width) / 2,
        y + (int(i / 2) * this.width) / 2,
        wied + 1,
        this.quad
      );
    }
  }
}
}

// **********SIGN FUNCTIONS**********
function Sign1(x, y, cont) {
  circle(
    x + cont / 2,
    y + cont / 2,
    cont * map(rns[31] + rns[SignPosition1], 0, 18, 0.2, 1)
  );
}

function Sign2(x, y, cont) {
  rectMode(CENTER);
  rect(
    x + cont / 2,
    y + cont / 2,
    cont * map(rns[30] + rns[SignPosition2], 0, 18, 0.2, 0.7),
    cont * map(rns[29] + rns[SignPosition1], 0, 18, 0.2, 0.7)
  );
  rectMode(CORNER);
}

function Sign3(x, y, cont) {
  rectMode(CENTER);
  rect(
    x + cont / 2,
    y + cont / 2,
    cont * map(rns[28] + rns[SignPosition2], 0, 18, 0.2, 0.7),
    cont * map(rns[27] + rns[SignPosition1], 0, 18, 0.2, 0.7)
  );
  rectMode(CORNER);
  line(
    x +
      cont / 2 -
      (cont * map(rns[28] + rns[SignPosition2], 0, 18, 0.2, 0.7)) / 2,
    y +
      cont / 2 -
      (cont * map(rns[27] + rns[SignPosition1], 0, 18, 0.2, 0.7)) / 2,
    x +
      cont / 2 +
      (cont * map(rns[28] + rns[SignPosition2], 0, 18, 0.2, 0.7)) / 2,
    y +
      cont / 2 +
      (cont * map(rns[27] + rns[SignPosition1], 0, 18, 0.2, 0.7)) / 2
  );
  line(
    x +
      cont / 2 -
      (cont * map(rns[28] + rns[SignPosition2], 0, 18, 0.2, 0.7)) / 2,
    y +
      cont / 2 +
      (cont * map(rns[27] + rns[SignPosition1], 0, 18, 0.2, 0.7)) / 2,
    x +
      cont / 2 +
      (cont * map(rns[28] + rns[SignPosition2], 0, 18, 0.2, 0.7)) / 2,
    y +
      cont / 2 -
      (cont * map(rns[27] + rns[SignPosition1], 0, 18, 0.2, 0.7)) / 2
  );
}

function Sign4(x, y, cont) {
  rectMode(CENTER);
  rect(
    x + cont / 2,
    y + cont / 2,
    cont,
    cont * map(rns[26] + rns[SignPosition2], 0, 18, 0.15, 0.85)
  );
  circle(
    x + cont / 2,
    y + cont / 2,
    cont * map(rns[26] + rns[SignPosition2], 0, 18, 0.08, 0.7)
  );
  rectMode(CORNER);
}

function Sign5(x, y, cont) {
  line(
    x + cont * 0.5,
    y + cont * map(rns[25] + rns[SignPosition1], 0, 18, 0.1, 0.4),
    x + cont * map(rns[24] + rns[SignPosition2], 0, 18, 0.1, 0.4),
    y + cont * 0.5
  );
  line(
    x + cont * 0.5,
    y + cont * map(rns[25] + rns[SignPosition1], 0, 18, 0.1, 0.4),
    x + cont * map(rns[24] + rns[SignPosition2], 0, 18, 0.9, 0.6),
    y + cont * 0.5
  );
  line(
    x + cont * map(rns[24] + rns[SignPosition2], 0, 18, 0.1, 0.4),
    y + cont * 0.5,
    x + cont * 0.5,
    y + cont * map(rns[25] + rns[SignPosition1], 0, 18, 0.9, 0.6)
  );
  line(
    x + cont * 0.5,
    y + cont * map(rns[25] + rns[SignPosition1], 0, 18, 0.9, 0.6),
    x + cont * map(rns[24] + rns[SignPosition2], 0, 18, 0.9, 0.6),
    y + cont * 0.5
  );
}

function Sign6(x, y, cont) {
  rectMode(CENTER);
  rect(
    x + cont / 2,
    y + cont / 2,

    cont * map(rns[23] + rns[SignPosition1], 0, 18, 0.15, 0.85),
    cont
  );
  circle(
    x + cont / 2,
    y + cont / 2,
    cont * map(rns[23] + rns[SignPosition1], 0, 18, 0.08, 0.7)
  );
  rectMode(CORNER);
}

function Sign7(x, y, cont) {
  rectMode(CENTER);
  rect(
    x + cont / 2,
    y + cont / 2,
    cont * map(rns[23] + rns[SignPosition1], 0, 18, 0.1, 0.8),
    cont * map(rns[23] + rns[SignPosition1], 0, 18, 0.1, 0.8)
  );
  line(
    x,
    y,
    x + (cont - cont * map(rns[23] + rns[SignPosition1], 0, 18, 0.1, 0.8)) / 2,
    y + (cont - cont * map(rns[23] + rns[SignPosition1], 0, 18, 0.1, 0.8)) / 2
  );
  line(
    x,
    y + cont,
    x + (cont - cont * map(rns[23] + rns[SignPosition1], 0, 18, 0.1, 0.8)) / 2,
    y +
      cont -
      (cont - cont * map(rns[23] + rns[SignPosition1], 0, 18, 0.1, 0.8)) / 2
  );
  line(
    x + cont,
    y,
    x +
      cont -
      (cont - cont * map(rns[23] + rns[SignPosition1], 0, 18, 0.1, 0.8)) / 2,
    y + (cont - cont * map(rns[23] + rns[SignPosition1], 0, 18, 0.1, 0.8)) / 2
  );
  line(
    x + cont,
    y + cont,
    x +
      cont -
      (cont - cont * map(rns[23] + rns[SignPosition1], 0, 18, 0.1, 0.8)) / 2,
    y +
      cont -
      (cont - cont * map(rns[23] + rns[SignPosition1], 0, 18, 0.1, 0.8)) / 2
  );
  rectMode(CORNER);
}

function Sign8(x, y, cont) {
  triangle(
    x + cont / 2,
    y + cont * map(rns[22] + rns[SignPosition1], 0, 18, 0.625, 0.9),
    x + cont * 0.9,
    y + cont,
    x + cont * 0.1,
    y + cont
  );
  triangle(
    x + cont * 0.1,
    y,
    x + cont * 0.9,
    y,
    x + cont / 2,
    y + cont * map(rns[22] + rns[SignPosition1], 0, 18, 0.375, 0.1)
  );

  circle(
    x + cont / 2,
    y + cont / 2,
    cont * map(rns[22] + rns[SignPosition1], 0, 18, 0.15, 0.7)
  );
}

function Sign9(x, y, cont) {
  triangle(
    x,
    y + cont * 0.1,
    x + cont * map(rns[21] + rns[SignPosition2], 0, 18, 0.1, 0.375),
    y + cont / 2,
    x,
    y + cont * 0.9
  );
  triangle(
    x + cont,
    y + cont * 0.1,
    x + cont * map(rns[21] + rns[SignPosition2], 0, 18, 0.9, 0.625),
    y + cont / 2,
    x + cont,
    y + cont * 0.9
  );
  circle(x + cont / 2, y + cont / 2, cont * map(rns[21] + rns[SignPosition2], 0, 18, 0.7, 0.15));
}

// ********** FUNCTION TO FILL EVERY BLOCK WITH COLOR**********
function BlockColorFiller(hash) {
  this.hash = hash;
  fillColor = round(map(hash, 0, 9, 0, 3));
  fill(
    r[colorset][fillColor],
    g[colorset][fillColor],
    b[colorset][fillColor],
    a[colorset][fillColor]
  );
}

//  Copied from ArtBlocks github
//----------------------------------------------------------------
function random_hash() {
  let x = "0123456789abcdef",
    hash = "0x";
  for (let i = 64; i > 0; --i) {
    hash += x[Math.floor(Math.random() * x.length)];
  }

  // TEST HASH FOR DETERMINATION TEST
  //hash = "0x53b752200d52adacfeb1464a71f6df26a6cfe1203778cfc41fccd91fba51fae1 ";

  return hash;
}
//----------------------------------------------------------------
